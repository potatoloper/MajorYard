spring:
  application:
    name: majorYard
  servlet:
    multipart:
      max-file-size: 500MB
      max-request-size: 500MB
  cloud:
    aws:
      credentials:
        access-key: AKIA5FTZBMBQWGRD626H
        secret-key: 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
      s3:
        bucket: majoryardbucket
      region:
        static: ap-northeast-2
        auto: false
      stack:
        auto: false

# RDS의 mysql - majoryarddb
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://majoryarddb.cf2w2gewqf4l.ap-northeast-2.rds.amazonaws.com/majoryarddb?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&serverTimezone=Asia/Seoul
    username: admin
    password: tksgkrghkdlxld


# local
#  datasource:
#    driver-class-name: com.mysql.cj.jdbc.Driver
#    url: jdbc:mysql://localhost:3306/majorYard?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&serverTimezone=Asia/Seoul
#    username: root
#    password: 12341234


    open-in-view: true
    hibernate:
      ddl-auto: update
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    show-sql: true  # SQL 출력 여부
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect # 사용할 SQL Dialect
        format_sql: true # SQL 포맷팅 여부

  thymeleaf:
    prefix: classpath:/templates/

#jwt:
#  header: Authorization  # JWT 토큰을 저장할 헤더 이름
#  #HS512 알고리즘을 사용할 것이기 때문에 512bit, 즉 64byte 이상의 secret key를 사용해야 한다.
#  #echo 'silvernine-tech-spring-boot-jwt-tutorial-secret-silvernine-tech-spring-boot-jwt-tutorial-secret' 이라는 문자열을 base64로 인코딩
#  secret: c2lsdmVybmluZS10ZWNoLXNwcmluZy1ib290LWp3dC10dXRvcmlhbC1zZWNyZXQtc2lsdmVybmluZS10ZWNoLXNwcmluZy1ib290LWp3dC10dXRvcmlhbC1zZWNyZXQK
#  token-validity-in-seconds: 86400	# 초  (토큰 유효 시간)


logging:
  level:
    org:
      springframework:
        web: DEBUG  # 웹 요청 처리에 관한 로그
        data: DEBUG # Spring Data 관련 로그
        security: DEBUG # Spring Security 관련 로그
      hibernate:
        SQL: DEBUG  # 실행되는 SQL 쿼리를 출력
        type: TRACE # SQL 쿼리의 파라미터 값을 출력
        event: TRACE # 하이버네이트 이벤트 처리 로그
      jpa:
        repository: DEBUG # JPA 리포지토리 호출 정보

  spring:
    profiles:
      group:
        set1: set1
        set2: set2